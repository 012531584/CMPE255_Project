{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time:  23.04346783099936\n"
     ]
    }
   ],
   "source": [
    "import json \n",
    "import pandas as pd \n",
    "from pandas.io.json import json_normalize #package for flattening json in pandas df\n",
    "\n",
    "import timeit\n",
    "\n",
    "#load json object\n",
    "\n",
    "start = timeit.default_timer()\n",
    "\n",
    "json_data = ''\n",
    "with open('business.json', 'r', encoding='utf-8') as in_file:\n",
    "    for i, line in enumerate(in_file):\n",
    "        if i == 0 and line: \n",
    "            json_data += '[' + line\n",
    "        elif line:\n",
    "            json_data += ',' + line\n",
    "        else:\n",
    "            pass\n",
    "    json_data += ']\\n'\n",
    "    \n",
    "data = json.loads(json_data)\n",
    "df = json_normalize(data)\n",
    "#df\n",
    "stop = timeit.default_timer()\n",
    "print('Time: ', stop - start)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>stars</th>\n",
       "      <th>categories</th>\n",
       "      <th>review_count</th>\n",
       "      <th>business_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Arizona Biltmore Golf Club</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Golf, Active Life</td>\n",
       "      <td>5</td>\n",
       "      <td>1SWheh84yJXfytovILXOAQ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Emerald Chinese Restaurant</td>\n",
       "      <td>2.5</td>\n",
       "      <td>Specialty Food, Restaurants, Dim Sum, Imported...</td>\n",
       "      <td>128</td>\n",
       "      <td>QXAEGFB4oINsVuTFxEYKFQ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Musashi Japanese Restaurant</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Sushi Bars, Restaurants, Japanese</td>\n",
       "      <td>170</td>\n",
       "      <td>gnKjwL_1w79qoiV3IC_xQQ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Farmers Insurance - Paul Lorenz</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Insurance, Financial Services</td>\n",
       "      <td>3</td>\n",
       "      <td>xvX2CttrVhyG2z1dFg_0xw</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Queen City Plumbing</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Plumbing, Shopping, Local Services, Home Servi...</td>\n",
       "      <td>4</td>\n",
       "      <td>HhyxOkGAM07SRYtlQ4wMFQ</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              name  stars  \\\n",
       "0       Arizona Biltmore Golf Club    3.0   \n",
       "1       Emerald Chinese Restaurant    2.5   \n",
       "2      Musashi Japanese Restaurant    4.0   \n",
       "3  Farmers Insurance - Paul Lorenz    5.0   \n",
       "4              Queen City Plumbing    4.0   \n",
       "\n",
       "                                          categories  review_count  \\\n",
       "0                                  Golf, Active Life             5   \n",
       "1  Specialty Food, Restaurants, Dim Sum, Imported...           128   \n",
       "2                  Sushi Bars, Restaurants, Japanese           170   \n",
       "3                      Insurance, Financial Services             3   \n",
       "4  Plumbing, Shopping, Local Services, Home Servi...             4   \n",
       "\n",
       "              business_id  \n",
       "0  1SWheh84yJXfytovILXOAQ  \n",
       "1  QXAEGFB4oINsVuTFxEYKFQ  \n",
       "2  gnKjwL_1w79qoiV3IC_xQQ  \n",
       "3  xvX2CttrVhyG2z1dFg_0xw  \n",
       "4  HhyxOkGAM07SRYtlQ4wMFQ  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "keeps = ['name', 'stars', 'categories', 'review_count', 'business_id']\n",
    "business_df = df[keeps]\n",
    "business_df.head() "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get All Business ID in Restaurant Catag. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>stars</th>\n",
       "      <th>categories</th>\n",
       "      <th>review_count</th>\n",
       "      <th>business_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Emerald Chinese Restaurant</td>\n",
       "      <td>2.5</td>\n",
       "      <td>Specialty Food, Restaurants, Dim Sum, Imported...</td>\n",
       "      <td>128</td>\n",
       "      <td>QXAEGFB4oINsVuTFxEYKFQ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Musashi Japanese Restaurant</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Sushi Bars, Restaurants, Japanese</td>\n",
       "      <td>170</td>\n",
       "      <td>gnKjwL_1w79qoiV3IC_xQQ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Taco Bell</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Restaurants, Breakfast &amp; Brunch, Mexican, Taco...</td>\n",
       "      <td>18</td>\n",
       "      <td>1Dfx3zM-rW4n-31KeC8sJg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Marco's Pizza</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Italian, Restaurants, Pizza, Chicken Wings</td>\n",
       "      <td>16</td>\n",
       "      <td>fweCYi8FmbJXHCqLnwuk8w</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Carluccio's Tivoli Gardens</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Restaurants, Italian</td>\n",
       "      <td>40</td>\n",
       "      <td>PZ-LZzSlhSe9utkQYU8pFg</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           name  stars  \\\n",
       "1    Emerald Chinese Restaurant    2.5   \n",
       "2   Musashi Japanese Restaurant    4.0   \n",
       "11                    Taco Bell    3.0   \n",
       "13                Marco's Pizza    4.0   \n",
       "17   Carluccio's Tivoli Gardens    4.0   \n",
       "\n",
       "                                           categories  review_count  \\\n",
       "1   Specialty Food, Restaurants, Dim Sum, Imported...           128   \n",
       "2                   Sushi Bars, Restaurants, Japanese           170   \n",
       "11  Restaurants, Breakfast & Brunch, Mexican, Taco...            18   \n",
       "13         Italian, Restaurants, Pizza, Chicken Wings            16   \n",
       "17                               Restaurants, Italian            40   \n",
       "\n",
       "               business_id  \n",
       "1   QXAEGFB4oINsVuTFxEYKFQ  \n",
       "2   gnKjwL_1w79qoiV3IC_xQQ  \n",
       "11  1Dfx3zM-rW4n-31KeC8sJg  \n",
       "13  fweCYi8FmbJXHCqLnwuk8w  \n",
       "17  PZ-LZzSlhSe9utkQYU8pFg  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp = business_df.categories.apply(lambda categories: str(categories))\n",
    "restaurant_df = business_df[temp.apply(lambda categories: 'Restaurants' in categories)].copy()\n",
    "restaurant_df.head()\n",
    "# from https://stackoverflow.com/questions/52346296/pandas-dataframe-apply-typeerror-argument-of-type-float-is-not-iterable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1     QXAEGFB4oINsVuTFxEYKFQ\n",
       "2     gnKjwL_1w79qoiV3IC_xQQ\n",
       "11    1Dfx3zM-rW4n-31KeC8sJg\n",
       "13    fweCYi8FmbJXHCqLnwuk8w\n",
       "17    PZ-LZzSlhSe9utkQYU8pFg\n",
       "Name: business_id, dtype: object"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "business_id = restaurant_df.business_id\n",
    "business_id.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>cool</th>\n",
       "      <th>date</th>\n",
       "      <th>funny</th>\n",
       "      <th>review_id</th>\n",
       "      <th>stars</th>\n",
       "      <th>text</th>\n",
       "      <th>useful</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ujmEBvifdJM6h6RLv4wQIg</td>\n",
       "      <td>0</td>\n",
       "      <td>2013-05-07 04:34:36</td>\n",
       "      <td>1</td>\n",
       "      <td>Q1sbwvVQXV2734tPgoKj4Q</td>\n",
       "      <td>1</td>\n",
       "      <td>Total bill for this horrible service? Over $8G...</td>\n",
       "      <td>6</td>\n",
       "      <td>hG7b0MtEbXx5QzbzE6C_VA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NZnhc2sEQy3RmzKTZnqtwQ</td>\n",
       "      <td>0</td>\n",
       "      <td>2017-01-14 21:30:33</td>\n",
       "      <td>0</td>\n",
       "      <td>GJXCdrto3ASJOqKeVWPi6Q</td>\n",
       "      <td>5</td>\n",
       "      <td>I *adore* Travis at the Hard Rock's new Kelly ...</td>\n",
       "      <td>0</td>\n",
       "      <td>yXQM5uF2jS6es16SJzNHfg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>WTqjgwHlXbSFevF32_DJVw</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-11-09 20:09:03</td>\n",
       "      <td>0</td>\n",
       "      <td>2TzJjDVDEuAW6MR5Vuc1ug</td>\n",
       "      <td>5</td>\n",
       "      <td>I have to say that this office really has it t...</td>\n",
       "      <td>3</td>\n",
       "      <td>n6-Gk65cPZL6Uz8qRm3NYw</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ikCg8xy5JIg_NGPx-MSIDA</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-01-09 20:56:38</td>\n",
       "      <td>0</td>\n",
       "      <td>yi0R0Ugj_xUx_Nek0-_Qig</td>\n",
       "      <td>5</td>\n",
       "      <td>Went in for a lunch. Steak sandwich was delici...</td>\n",
       "      <td>0</td>\n",
       "      <td>dacAIZ6fTM6mqwW5uxkskg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>b1b1eb3uo-w561D0ZfCEiQ</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-01-30 23:07:38</td>\n",
       "      <td>0</td>\n",
       "      <td>11a8sVPMUFtaC7_ABRkmtw</td>\n",
       "      <td>1</td>\n",
       "      <td>Today was my second out of three sessions I ha...</td>\n",
       "      <td>7</td>\n",
       "      <td>ssoyf2_x0EQMed6fgHeMyQ</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              business_id  cool                date  funny  \\\n",
       "0  ujmEBvifdJM6h6RLv4wQIg     0 2013-05-07 04:34:36      1   \n",
       "1  NZnhc2sEQy3RmzKTZnqtwQ     0 2017-01-14 21:30:33      0   \n",
       "2  WTqjgwHlXbSFevF32_DJVw     0 2016-11-09 20:09:03      0   \n",
       "3  ikCg8xy5JIg_NGPx-MSIDA     0 2018-01-09 20:56:38      0   \n",
       "4  b1b1eb3uo-w561D0ZfCEiQ     0 2018-01-30 23:07:38      0   \n",
       "\n",
       "                review_id  stars  \\\n",
       "0  Q1sbwvVQXV2734tPgoKj4Q      1   \n",
       "1  GJXCdrto3ASJOqKeVWPi6Q      5   \n",
       "2  2TzJjDVDEuAW6MR5Vuc1ug      5   \n",
       "3  yi0R0Ugj_xUx_Nek0-_Qig      5   \n",
       "4  11a8sVPMUFtaC7_ABRkmtw      1   \n",
       "\n",
       "                                                text  useful  \\\n",
       "0  Total bill for this horrible service? Over $8G...       6   \n",
       "1  I *adore* Travis at the Hard Rock's new Kelly ...       0   \n",
       "2  I have to say that this office really has it t...       3   \n",
       "3  Went in for a lunch. Steak sandwich was delici...       0   \n",
       "4  Today was my second out of three sessions I ha...       7   \n",
       "\n",
       "                  user_id  \n",
       "0  hG7b0MtEbXx5QzbzE6C_VA  \n",
       "1  yXQM5uF2jS6es16SJzNHfg  \n",
       "2  n6-Gk65cPZL6Uz8qRm3NYw  \n",
       "3  dacAIZ6fTM6mqwW5uxkskg  \n",
       "4  ssoyf2_x0EQMed6fgHeMyQ  "
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# read review file\n",
    "import pandas as pd\n",
    "review_df = pd.read_json('review_small.json', lines=True)\n",
    "review_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get Review Data in Restaurant Field.  (haven't run through yet, took lots of time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import timeit\n",
    "start = timeit.default_timer()\n",
    "#temp = review_df.business_id.apply(lambda categories: str(categories))\n",
    "\n",
    "#review_restaurant_df = pd.DataFrame()\n",
    "\n",
    "index_list = []\n",
    "for ID in business_id:\n",
    "    #is_id = review_df[review_df.business_id == ID]\n",
    "    index_list += review_df[review_df.business_id == ID].index.tolist()\n",
    "    \n",
    "    #review_restaurant_df = pd.concat([review_restaurant_df, is_id])\n",
    "    \n",
    "\n",
    "stop = timeit.default_timer()\n",
    "print('Time: ', stop - start)      \n",
    "\n",
    "index_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Take One Business ID for Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>business_id</th>\n",
       "      <th>cool</th>\n",
       "      <th>date</th>\n",
       "      <th>funny</th>\n",
       "      <th>review_id</th>\n",
       "      <th>stars</th>\n",
       "      <th>text</th>\n",
       "      <th>useful</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8609</th>\n",
       "      <td>QXAEGFB4oINsVuTFxEYKFQ</td>\n",
       "      <td>0</td>\n",
       "      <td>2017-01-27 21:54:30</td>\n",
       "      <td>2</td>\n",
       "      <td>6W0MQHmasK0IsaoDo4bmkw</td>\n",
       "      <td>3</td>\n",
       "      <td>My girlfriend and I went for dinner at Emerald...</td>\n",
       "      <td>3</td>\n",
       "      <td>2K62MJ4CJ19L8Tp5pRfjfQ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17253</th>\n",
       "      <td>QXAEGFB4oINsVuTFxEYKFQ</td>\n",
       "      <td>0</td>\n",
       "      <td>2013-06-24 23:11:30</td>\n",
       "      <td>0</td>\n",
       "      <td>BeeBfUxvzD4qNX4HxrgA5g</td>\n",
       "      <td>3</td>\n",
       "      <td>We've always been there on a Sunday so we were...</td>\n",
       "      <td>0</td>\n",
       "      <td>A0kENtCCoVT3m7T35zb2Vg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23456</th>\n",
       "      <td>QXAEGFB4oINsVuTFxEYKFQ</td>\n",
       "      <td>0</td>\n",
       "      <td>2016-01-04 12:59:22</td>\n",
       "      <td>0</td>\n",
       "      <td>A1D2kUnZ0HTroFreAheNSg</td>\n",
       "      <td>3</td>\n",
       "      <td>***No automatic doors, not baby friendly!*** I...</td>\n",
       "      <td>0</td>\n",
       "      <td>SuOLY03LW5ZcnynKhbTydA</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24704</th>\n",
       "      <td>QXAEGFB4oINsVuTFxEYKFQ</td>\n",
       "      <td>0</td>\n",
       "      <td>2014-05-09 02:38:43</td>\n",
       "      <td>0</td>\n",
       "      <td>2pf45Stf-pNew-xgTababQ</td>\n",
       "      <td>1</td>\n",
       "      <td>Horrible service,\\nI went there tonight with m...</td>\n",
       "      <td>1</td>\n",
       "      <td>lymyUak6KNcNKoDbK87MiQ</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30636</th>\n",
       "      <td>QXAEGFB4oINsVuTFxEYKFQ</td>\n",
       "      <td>2</td>\n",
       "      <td>2011-03-21 14:39:55</td>\n",
       "      <td>1</td>\n",
       "      <td>RHhlmL07evgAdPaXQV8Omg</td>\n",
       "      <td>4</td>\n",
       "      <td>One of the gauges of a good Chinese restaurant...</td>\n",
       "      <td>2</td>\n",
       "      <td>6vU0I5XgCv9OQHZ76rV6qw</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  business_id  cool                date  funny  \\\n",
       "8609   QXAEGFB4oINsVuTFxEYKFQ     0 2017-01-27 21:54:30      2   \n",
       "17253  QXAEGFB4oINsVuTFxEYKFQ     0 2013-06-24 23:11:30      0   \n",
       "23456  QXAEGFB4oINsVuTFxEYKFQ     0 2016-01-04 12:59:22      0   \n",
       "24704  QXAEGFB4oINsVuTFxEYKFQ     0 2014-05-09 02:38:43      0   \n",
       "30636  QXAEGFB4oINsVuTFxEYKFQ     2 2011-03-21 14:39:55      1   \n",
       "\n",
       "                    review_id  stars  \\\n",
       "8609   6W0MQHmasK0IsaoDo4bmkw      3   \n",
       "17253  BeeBfUxvzD4qNX4HxrgA5g      3   \n",
       "23456  A1D2kUnZ0HTroFreAheNSg      3   \n",
       "24704  2pf45Stf-pNew-xgTababQ      1   \n",
       "30636  RHhlmL07evgAdPaXQV8Omg      4   \n",
       "\n",
       "                                                    text  useful  \\\n",
       "8609   My girlfriend and I went for dinner at Emerald...       3   \n",
       "17253  We've always been there on a Sunday so we were...       0   \n",
       "23456  ***No automatic doors, not baby friendly!*** I...       0   \n",
       "24704  Horrible service,\\nI went there tonight with m...       1   \n",
       "30636  One of the gauges of a good Chinese restaurant...       2   \n",
       "\n",
       "                      user_id  \n",
       "8609   2K62MJ4CJ19L8Tp5pRfjfQ  \n",
       "17253  A0kENtCCoVT3m7T35zb2Vg  \n",
       "23456  SuOLY03LW5ZcnynKhbTydA  \n",
       "24704  lymyUak6KNcNKoDbK87MiQ  \n",
       "30636  6vU0I5XgCv9OQHZ76rV6qw  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "same_id = review_df[ review_df['business_id']=='QXAEGFB4oINsVuTFxEYKFQ']\n",
    "same_id.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic Text Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/randylee/anaconda3/lib/python3.6/site-packages/pandas/core/generic.py:4401: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self[name] = value\n"
     ]
    }
   ],
   "source": [
    "import string\n",
    "# convert to lowercase\n",
    "same_id.text= same_id.text.apply(lambda x: x.lower())\n",
    "\n",
    "#remove punctuation\n",
    "same_id.text= same_id.text.apply(lambda x: x.translate(str.maketrans('','',string.punctuation)))\n",
    "\n",
    "#remove digit\n",
    "same_id.text= same_id.text.apply(lambda x: x.translate(str.maketrans('','',string.digits)))\n",
    "\n",
    "#remove stop words    (required to download 'stopwords')\n",
    "from nltk.corpus import stopwords\n",
    "#import nltk\n",
    "#nltk.download('stopwords')\n",
    "stop = stopwords.words('english')\n",
    "same_id.text= same_id.text.apply(lambda x: \" \".join(x for x in x.split() if x not in stop))\n",
    "\n",
    "# remove suffices (reduce a lot ncols)\n",
    "#from nltk.stem import PorterStemmer\n",
    "#st = PorterStemmer()\n",
    "#same_id.text= same_id.text.apply(lambda x: \" \".join([st.stem(word) for word in x.split()]))\n",
    "\n",
    "# Lemmatization\n",
    "#from textblob import Word\n",
    "#same_id.text= same_id.text.apply(lambda x: \" \".join([Word(word).lemmatize() for word in x.split()]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Finding Nouns Tags & Adjective Tags"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_freq_word(dic):\n",
    "    words_df = pd.DataFrame({'word':list(dic.keys()), 'count':list(dic.values())})\n",
    "    d = words_df.nlargest(columns=\"count\",n = 30)\n",
    "    most_freq_word = ' '.join(d.word).split()\n",
    "    return most_freq_word"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "text_sum = ' '.join(same_id.text).split()    # collect all reviews from the restaurant\n",
    "\n",
    "from nltk.tag import *              # get Nouns & Adjectives words\n",
    "tagged_sent = pos_tag(text_sum)\n",
    "nouns = [word for word,pos in tagged_sent if pos == 'NNP' or pos=='NN']    # get nouns \n",
    "adjs = [word for word,pos in tagged_sent if pos == 'JJ']    # get adjectives\n",
    "\n",
    "from nltk import FreqDist           # get word frequency\n",
    "noun_fdist = FreqDist(nouns)\n",
    "adj_fdist = FreqDist(adjs)\n",
    "\n",
    "most_freq_noun = get_freq_word(noun_fdist)    # top 30 frequent\n",
    "most_freq_adj = get_freq_word(adj_fdist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['food', 'dim', 'sum', 'service', 'place', 'restaurant', 'time', 'rice', 'order', 'dinner', 'ang', 'cart', 'experience', 'pork', 'dont', 'quality', 'staff', 'family', 'lunch', 'bill', 'im', 'soup', 'way', 'sa', 'nothing', 'chicken', 'menu', 'mississauga', 'taste', 'yung']\n",
      "['good', 'chinese', 'sum', 'great', 'bad', 'table', 'dim', 'busy', 'fresh', 'many', 'overall', 'new', 'hot', 'huge', 'much', 'ive', 'expensive', 'sure', 'fish', 'delicious', 'large', 'nice', 'dont', 'authentic', 'full', 'terrible', 'traditional', 'different', 'cold', 'horrible']\n"
     ]
    }
   ],
   "source": [
    "print(most_freq_noun)\n",
    "print(most_freq_adj)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
